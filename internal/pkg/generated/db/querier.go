// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	BulkCreateGrammarItems(ctx context.Context, arg []BulkCreateGrammarItemsParams) (int64, error)
	BulkCreateStoryLines(ctx context.Context, arg []BulkCreateStoryLinesParams) (int64, error)
	BulkCreateVocabularyItems(ctx context.Context, arg []BulkCreateVocabularyItemsParams) (int64, error)
	CheckFootnoteExists(ctx context.Context, arg CheckFootnoteExistsParams) (int32, error)
	CheckGrammarExists(ctx context.Context, arg CheckGrammarExistsParams) (bool, error)
	CheckVocabularyExists(ctx context.Context, arg CheckVocabularyExistsParams) (bool, error)
	CreateFootnote(ctx context.Context, arg CreateFootnoteParams) (int32, error)
	CreateFootnoteReference(ctx context.Context, arg CreateFootnoteReferenceParams) error
	CreateGrammarItem(ctx context.Context, arg CreateGrammarItemParams) (int32, error)
	CreateStory(ctx context.Context, arg CreateStoryParams) (CreateStoryRow, error)
	CreateVocabularyItem(ctx context.Context, arg CreateVocabularyItemParams) (int32, error)
	DeleteAllGrammarForStory(ctx context.Context, storyID pgtype.Int4) error
	DeleteAllLineAnnotations(ctx context.Context, arg DeleteAllLineAnnotationsParams) error
	DeleteAllStoryAnnotations(ctx context.Context, storyID pgtype.Int4) error
	DeleteAllStoryLines(ctx context.Context, storyID int32) error
	DeleteAllVocabularyForStory(ctx context.Context, storyID pgtype.Int4) error
	DeleteFootnote(ctx context.Context, id int32) error
	DeleteFootnoteReferences(ctx context.Context, footnoteID int32) error
	DeleteGrammarItem(ctx context.Context, id int32) error
	DeleteGrammarItems(ctx context.Context, arg DeleteGrammarItemsParams) error
	DeleteStory(ctx context.Context, storyID int32) error
	DeleteStoryDescriptions(ctx context.Context, storyID int32) error
	DeleteStoryLine(ctx context.Context, arg DeleteStoryLineParams) error
	DeleteStoryTitles(ctx context.Context, storyID int32) error
	DeleteVocabularyItem(ctx context.Context, id int32) error
	DeleteVocabularyItems(ctx context.Context, arg DeleteVocabularyItemsParams) error
	GetAllAnnotationsForStory(ctx context.Context, storyID pgtype.Int4) ([]GetAllAnnotationsForStoryRow, error)
	GetAllFootnotesForStory(ctx context.Context, storyID pgtype.Int4) ([]GetAllFootnotesForStoryRow, error)
	GetAllGrammarForStory(ctx context.Context, storyID pgtype.Int4) ([]GetAllGrammarForStoryRow, error)
	GetAllStories(ctx context.Context) ([]Story, error)
	GetAllStoriesBasic(ctx context.Context, languageCode string) ([]GetAllStoriesBasicRow, error)
	GetAllStoriesWithTitles(ctx context.Context) ([]GetAllStoriesWithTitlesRow, error)
	GetAllVocabularyForStory(ctx context.Context, storyID pgtype.Int4) ([]GetAllVocabularyForStoryRow, error)
	GetFootnoteReferences(ctx context.Context, footnoteID int32) ([]string, error)
	GetFootnotes(ctx context.Context, arg GetFootnotesParams) ([]Footnote, error)
	GetGrammarItems(ctx context.Context, arg GetGrammarItemsParams) ([]GrammarItem, error)
	GetLineText(ctx context.Context, arg GetLineTextParams) (string, error)
	// Core story operations
	GetStory(ctx context.Context, storyID int32) (Story, error)
	// Story descriptions
	GetStoryDescription(ctx context.Context, arg GetStoryDescriptionParams) (string, error)
	GetStoryFootnotesWithReferences(ctx context.Context, storyID pgtype.Int4) ([]GetStoryFootnotesWithReferencesRow, error)
	GetStoryLine(ctx context.Context, arg GetStoryLineParams) (StoryLine, error)
	// Story lines
	GetStoryLines(ctx context.Context, storyID int32) ([]StoryLine, error)
	GetStoryTitle(ctx context.Context, arg GetStoryTitleParams) (string, error)
	// Story titles
	GetStoryTitles(ctx context.Context, storyID int32) ([]StoryTitle, error)
	GetStoryWithDescription(ctx context.Context, storyID int32) (GetStoryWithDescriptionRow, error)
	GetVocabularyItems(ctx context.Context, arg GetVocabularyItemsParams) ([]VocabularyItem, error)
	LineExists(ctx context.Context, arg LineExistsParams) (bool, error)
	StoryExists(ctx context.Context, storyID int32) (bool, error)
	UpdateFootnote(ctx context.Context, arg UpdateFootnoteParams) error
	UpdateGrammarByPosition(ctx context.Context, arg UpdateGrammarByPositionParams) error
	UpdateStory(ctx context.Context, arg UpdateStoryParams) error
	UpdateStoryRevision(ctx context.Context, storyID int32) error
	UpdateVocabularyByPosition(ctx context.Context, arg UpdateVocabularyByPositionParams) error
	UpdateVocabularyByWord(ctx context.Context, arg UpdateVocabularyByWordParams) error
	UpdateVocabularyItem(ctx context.Context, arg UpdateVocabularyItemParams) error
	UpsertStoryDescription(ctx context.Context, arg UpsertStoryDescriptionParams) error
	UpsertStoryLine(ctx context.Context, arg UpsertStoryLineParams) error
	UpsertStoryTitle(ctx context.Context, arg UpsertStoryTitleParams) error
}

var _ Querier = (*Queries)(nil)
