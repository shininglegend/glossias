// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course_users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToCourse = `-- name: AddUserToCourse :exec
INSERT INTO course_users (course_id, user_id, enrolled_at)
VALUES ($1, $2, CURRENT_TIMESTAMP)
`

type AddUserToCourseParams struct {
	CourseID int32  `json:"course_id"`
	UserID   string `json:"user_id"`
}

func (q *Queries) AddUserToCourse(ctx context.Context, arg AddUserToCourseParams) error {
	_, err := q.db.Exec(ctx, addUserToCourse, arg.CourseID, arg.UserID)
	return err
}

const deleteAllUsersFromCourse = `-- name: DeleteAllUsersFromCourse :exec
DELETE FROM course_users
WHERE course_id = $1
`

func (q *Queries) DeleteAllUsersFromCourse(ctx context.Context, courseID int32) error {
	_, err := q.db.Exec(ctx, deleteAllUsersFromCourse, courseID)
	return err
}

const getCoursesForUser = `-- name: GetCoursesForUser :many
SELECT c.course_id, c.course_number, c.name, c.description, cu.enrolled_at
FROM courses c
JOIN course_users cu ON c.course_id = cu.course_id
WHERE cu.user_id = $1
ORDER BY c.course_number
`

type GetCoursesForUserRow struct {
	CourseID     int32            `json:"course_id"`
	CourseNumber string           `json:"course_number"`
	Name         string           `json:"name"`
	Description  pgtype.Text      `json:"description"`
	EnrolledAt   pgtype.Timestamp `json:"enrolled_at"`
}

func (q *Queries) GetCoursesForUser(ctx context.Context, userID string) ([]GetCoursesForUserRow, error) {
	rows, err := q.db.Query(ctx, getCoursesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCoursesForUserRow{}
	for rows.Next() {
		var i GetCoursesForUserRow
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseNumber,
			&i.Name,
			&i.Description,
			&i.EnrolledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersForCourse = `-- name: GetUsersForCourse :many
SELECT u.user_id, u.email, u.name, cu.enrolled_at
FROM users u
JOIN course_users cu ON u.user_id = cu.user_id
WHERE cu.course_id = $1
ORDER BY u.name
`

type GetUsersForCourseRow struct {
	UserID     string           `json:"user_id"`
	Email      string           `json:"email"`
	Name       string           `json:"name"`
	EnrolledAt pgtype.Timestamp `json:"enrolled_at"`
}

func (q *Queries) GetUsersForCourse(ctx context.Context, courseID int32) ([]GetUsersForCourseRow, error) {
	rows, err := q.db.Query(ctx, getUsersForCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersForCourseRow{}
	for rows.Next() {
		var i GetUsersForCourseRow
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.Name,
			&i.EnrolledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromCourse = `-- name: RemoveUserFromCourse :exec
DELETE FROM course_users
WHERE course_id = $1 AND user_id = $2
`

type RemoveUserFromCourseParams struct {
	CourseID int32  `json:"course_id"`
	UserID   string `json:"user_id"`
}

func (q *Queries) RemoveUserFromCourse(ctx context.Context, arg RemoveUserFromCourseParams) error {
	_, err := q.db.Exec(ctx, removeUserFromCourse, arg.CourseID, arg.UserID)
	return err
}
