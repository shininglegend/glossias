// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: courses.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :one

INSERT INTO courses (course_number, name, description)
VALUES ($1, $2, $3)
RETURNING course_id, course_number, name, description, created_at, updated_at
`

type CreateCourseParams struct {
	CourseNumber string      `json:"course_number"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
}

// Course management queries
func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse, arg.CourseNumber, arg.Name, arg.Description)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseNumber,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses WHERE course_id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, courseID int32) error {
	_, err := q.db.Exec(ctx, deleteCourse, courseID)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT course_id, course_number, name, description, created_at, updated_at
FROM courses
WHERE course_id = $1
`

func (q *Queries) GetCourse(ctx context.Context, courseID int32) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, courseID)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseNumber,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCourseByNumber = `-- name: GetCourseByNumber :one
SELECT course_id, course_number, name, description, created_at, updated_at
FROM courses
WHERE course_number = $1
`

func (q *Queries) GetCourseByNumber(ctx context.Context, courseNumber string) (Course, error) {
	row := q.db.QueryRow(ctx, getCourseByNumber, courseNumber)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseNumber,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCoursesForUser = `-- name: GetCoursesForUser :many
SELECT c.course_id, c.course_number, c.name, c.description, c.created_at, c.updated_at
FROM courses c
JOIN course_admins ca ON c.course_id = ca.course_id
WHERE ca.user_id = $1
ORDER BY c.course_number
`

func (q *Queries) GetCoursesForUser(ctx context.Context, userID string) ([]Course, error) {
	rows, err := q.db.Query(ctx, getCoursesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseNumber,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCourses = `-- name: ListCourses :many
SELECT course_id, course_number, name, description, created_at, updated_at
FROM courses
ORDER BY course_number
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseNumber,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE courses
SET course_number = $2, name = $3, description = $4, updated_at = CURRENT_TIMESTAMP
WHERE course_id = $1
RETURNING course_id, course_number, name, description, created_at, updated_at
`

type UpdateCourseParams struct {
	CourseID     int32       `json:"course_id"`
	CourseNumber string      `json:"course_number"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, updateCourse,
		arg.CourseID,
		arg.CourseNumber,
		arg.Name,
		arg.Description,
	)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseNumber,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
