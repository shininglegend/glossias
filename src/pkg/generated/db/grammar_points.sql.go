// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: grammar_points.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addGrammarPointToStory = `-- name: AddGrammarPointToStory :exec
INSERT INTO story_grammar_points (story_id, grammar_point_id)
VALUES ($1, $2)
ON CONFLICT (story_id, grammar_point_id) DO NOTHING
`

type AddGrammarPointToStoryParams struct {
	StoryID        int32 `json:"story_id"`
	GrammarPointID int32 `json:"grammar_point_id"`
}

func (q *Queries) AddGrammarPointToStory(ctx context.Context, arg AddGrammarPointToStoryParams) error {
	_, err := q.db.Exec(ctx, addGrammarPointToStory, arg.StoryID, arg.GrammarPointID)
	return err
}

const clearStoryGrammarPoints = `-- name: ClearStoryGrammarPoints :exec
DELETE FROM story_grammar_points WHERE story_id = $1
`

func (q *Queries) ClearStoryGrammarPoints(ctx context.Context, storyID int32) error {
	_, err := q.db.Exec(ctx, clearStoryGrammarPoints, storyID)
	return err
}

const createGrammarPoint = `-- name: CreateGrammarPoint :one

INSERT INTO grammar_points (name, description)
VALUES ($1, $2)
RETURNING grammar_point_id, name, description, created_at
`

type CreateGrammarPointParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

// Grammar points management queries
func (q *Queries) CreateGrammarPoint(ctx context.Context, arg CreateGrammarPointParams) (GrammarPoint, error) {
	row := q.db.QueryRow(ctx, createGrammarPoint, arg.Name, arg.Description)
	var i GrammarPoint
	err := row.Scan(
		&i.GrammarPointID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGrammarPoint = `-- name: DeleteGrammarPoint :exec
DELETE FROM grammar_points WHERE grammar_point_id = $1
`

func (q *Queries) DeleteGrammarPoint(ctx context.Context, grammarPointID int32) error {
	_, err := q.db.Exec(ctx, deleteGrammarPoint, grammarPointID)
	return err
}

const getGrammarPoint = `-- name: GetGrammarPoint :one
SELECT grammar_point_id, name, description, created_at
FROM grammar_points
WHERE grammar_point_id = $1
`

func (q *Queries) GetGrammarPoint(ctx context.Context, grammarPointID int32) (GrammarPoint, error) {
	row := q.db.QueryRow(ctx, getGrammarPoint, grammarPointID)
	var i GrammarPoint
	err := row.Scan(
		&i.GrammarPointID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getGrammarPointByName = `-- name: GetGrammarPointByName :one
SELECT grammar_point_id, name, description, created_at
FROM grammar_points
WHERE name = $1
`

func (q *Queries) GetGrammarPointByName(ctx context.Context, name string) (GrammarPoint, error) {
	row := q.db.QueryRow(ctx, getGrammarPointByName, name)
	var i GrammarPoint
	err := row.Scan(
		&i.GrammarPointID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getStoriesWithGrammarPoint = `-- name: GetStoriesWithGrammarPoint :many
SELECT s.story_id, s.week_number, s.day_letter, s.video_url, s.last_revision, s.author_id, s.author_name, s.course_id
FROM stories s
JOIN story_grammar_points sgp ON s.story_id = sgp.story_id
WHERE sgp.grammar_point_id = $1
ORDER BY s.week_number, s.day_letter
`

func (q *Queries) GetStoriesWithGrammarPoint(ctx context.Context, grammarPointID int32) ([]Story, error) {
	rows, err := q.db.Query(ctx, getStoriesWithGrammarPoint, grammarPointID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Story{}
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.StoryID,
			&i.WeekNumber,
			&i.DayLetter,
			&i.VideoUrl,
			&i.LastRevision,
			&i.AuthorID,
			&i.AuthorName,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoryGrammarPoints = `-- name: GetStoryGrammarPoints :many
SELECT gp.grammar_point_id, gp.name, gp.description
FROM grammar_points gp
JOIN story_grammar_points sgp ON gp.grammar_point_id = sgp.grammar_point_id
WHERE sgp.story_id = $1
ORDER BY gp.name
`

type GetStoryGrammarPointsRow struct {
	GrammarPointID int32       `json:"grammar_point_id"`
	Name           string      `json:"name"`
	Description    pgtype.Text `json:"description"`
}

func (q *Queries) GetStoryGrammarPoints(ctx context.Context, storyID int32) ([]GetStoryGrammarPointsRow, error) {
	rows, err := q.db.Query(ctx, getStoryGrammarPoints, storyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStoryGrammarPointsRow{}
	for rows.Next() {
		var i GetStoryGrammarPointsRow
		if err := rows.Scan(&i.GrammarPointID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGrammarPoints = `-- name: ListGrammarPoints :many
SELECT grammar_point_id, name, description, created_at
FROM grammar_points
ORDER BY name
`

func (q *Queries) ListGrammarPoints(ctx context.Context) ([]GrammarPoint, error) {
	rows, err := q.db.Query(ctx, listGrammarPoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GrammarPoint{}
	for rows.Next() {
		var i GrammarPoint
		if err := rows.Scan(
			&i.GrammarPointID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGrammarPointFromStory = `-- name: RemoveGrammarPointFromStory :exec
DELETE FROM story_grammar_points
WHERE story_id = $1 AND grammar_point_id = $2
`

type RemoveGrammarPointFromStoryParams struct {
	StoryID        int32 `json:"story_id"`
	GrammarPointID int32 `json:"grammar_point_id"`
}

func (q *Queries) RemoveGrammarPointFromStory(ctx context.Context, arg RemoveGrammarPointFromStoryParams) error {
	_, err := q.db.Exec(ctx, removeGrammarPointFromStory, arg.StoryID, arg.GrammarPointID)
	return err
}

const updateGrammarPoint = `-- name: UpdateGrammarPoint :one
UPDATE grammar_points
SET name = $2, description = $3
WHERE grammar_point_id = $1
RETURNING grammar_point_id, name, description, created_at
`

type UpdateGrammarPointParams struct {
	GrammarPointID int32       `json:"grammar_point_id"`
	Name           string      `json:"name"`
	Description    pgtype.Text `json:"description"`
}

func (q *Queries) UpdateGrammarPoint(ctx context.Context, arg UpdateGrammarPointParams) (GrammarPoint, error) {
	row := q.db.QueryRow(ctx, updateGrammarPoint, arg.GrammarPointID, arg.Name, arg.Description)
	var i GrammarPoint
	err := row.Scan(
		&i.GrammarPointID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
