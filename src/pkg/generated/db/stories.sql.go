// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStory = `-- name: CreateStory :one
INSERT INTO stories (week_number, day_letter, video_url, author_id, author_name, course_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING story_id, last_revision
`

type CreateStoryParams struct {
	WeekNumber int32       `json:"week_number"`
	DayLetter  string      `json:"day_letter"`
	VideoUrl   pgtype.Text `json:"video_url"`
	AuthorID   string      `json:"author_id"`
	AuthorName string      `json:"author_name"`
	CourseID   pgtype.Int4 `json:"course_id"`
}

type CreateStoryRow struct {
	StoryID      int32            `json:"story_id"`
	LastRevision pgtype.Timestamp `json:"last_revision"`
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) (CreateStoryRow, error) {
	row := q.db.QueryRow(ctx, createStory,
		arg.WeekNumber,
		arg.DayLetter,
		arg.VideoUrl,
		arg.AuthorID,
		arg.AuthorName,
		arg.CourseID,
	)
	var i CreateStoryRow
	err := row.Scan(&i.StoryID, &i.LastRevision)
	return i, err
}

const deleteStory = `-- name: DeleteStory :exec
DELETE FROM stories WHERE story_id = $1
`

func (q *Queries) DeleteStory(ctx context.Context, storyID int32) error {
	_, err := q.db.Exec(ctx, deleteStory, storyID)
	return err
}

const getAllStories = `-- name: GetAllStories :many
SELECT s.story_id, s.week_number, s.day_letter, s.video_url, s.last_revision, s.author_id, s.author_name, s.course_id
FROM stories s
ORDER BY s.week_number, s.day_letter
`

func (q *Queries) GetAllStories(ctx context.Context) ([]Story, error) {
	rows, err := q.db.Query(ctx, getAllStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Story{}
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.StoryID,
			&i.WeekNumber,
			&i.DayLetter,
			&i.VideoUrl,
			&i.LastRevision,
			&i.AuthorID,
			&i.AuthorName,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllStoriesBasic = `-- name: GetAllStoriesBasic :many
SELECT DISTINCT s.story_id, s.week_number, s.day_letter, st.title
FROM stories s
JOIN story_titles st ON s.story_id = st.story_id
WHERE st.language_code = $1 OR $1 = ''
ORDER BY s.week_number, s.day_letter
`

type GetAllStoriesBasicRow struct {
	StoryID    int32  `json:"story_id"`
	WeekNumber int32  `json:"week_number"`
	DayLetter  string `json:"day_letter"`
	Title      string `json:"title"`
}

func (q *Queries) GetAllStoriesBasic(ctx context.Context, languageCode string) ([]GetAllStoriesBasicRow, error) {
	rows, err := q.db.Query(ctx, getAllStoriesBasic, languageCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllStoriesBasicRow{}
	for rows.Next() {
		var i GetAllStoriesBasicRow
		if err := rows.Scan(
			&i.StoryID,
			&i.WeekNumber,
			&i.DayLetter,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllStoriesWithTitles = `-- name: GetAllStoriesWithTitles :many
SELECT DISTINCT s.story_id, s.week_number, s.day_letter, st.title, st.language_code
FROM stories s
JOIN story_titles st ON s.story_id = st.story_id
ORDER BY s.week_number, s.day_letter
`

type GetAllStoriesWithTitlesRow struct {
	StoryID      int32  `json:"story_id"`
	WeekNumber   int32  `json:"week_number"`
	DayLetter    string `json:"day_letter"`
	Title        string `json:"title"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetAllStoriesWithTitles(ctx context.Context) ([]GetAllStoriesWithTitlesRow, error) {
	rows, err := q.db.Query(ctx, getAllStoriesWithTitles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllStoriesWithTitlesRow{}
	for rows.Next() {
		var i GetAllStoriesWithTitlesRow
		if err := rows.Scan(
			&i.StoryID,
			&i.WeekNumber,
			&i.DayLetter,
			&i.Title,
			&i.LanguageCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseIdForStory = `-- name: GetCourseIdForStory :one
SELECT course_id FROM stories WHERE story_id = $1
`

func (q *Queries) GetCourseIdForStory(ctx context.Context, storyID int32) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, getCourseIdForStory, storyID)
	var course_id pgtype.Int4
	err := row.Scan(&course_id)
	return course_id, err
}

const getStoriesByCourse = `-- name: GetStoriesByCourse :many
SELECT s.story_id, s.week_number, s.day_letter, s.video_url, s.last_revision, s.author_id, s.author_name, s.course_id
FROM stories s
WHERE s.course_id = $1
ORDER BY s.week_number, s.day_letter
`

func (q *Queries) GetStoriesByCourse(ctx context.Context, courseID pgtype.Int4) ([]Story, error) {
	rows, err := q.db.Query(ctx, getStoriesByCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Story{}
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.StoryID,
			&i.WeekNumber,
			&i.DayLetter,
			&i.VideoUrl,
			&i.LastRevision,
			&i.AuthorID,
			&i.AuthorName,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoriesForUserCourses = `-- name: GetStoriesForUserCourses :many
SELECT s.story_id, s.week_number, s.day_letter, s.video_url, s.last_revision, s.author_id, s.author_name, s.course_id
FROM stories s
JOIN course_admins ca ON s.course_id = ca.course_id
WHERE ca.user_id = $1
ORDER BY s.week_number, s.day_letter
`

func (q *Queries) GetStoriesForUserCourses(ctx context.Context, userID string) ([]Story, error) {
	rows, err := q.db.Query(ctx, getStoriesForUserCourses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Story{}
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.StoryID,
			&i.WeekNumber,
			&i.DayLetter,
			&i.VideoUrl,
			&i.LastRevision,
			&i.AuthorID,
			&i.AuthorName,
			&i.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStory = `-- name: GetStory :one

SELECT s.story_id, s.week_number, s.day_letter, s.video_url, s.last_revision, s.author_id, s.author_name, s.course_id
FROM stories s
WHERE s.story_id = $1
`

// Core story operations
func (q *Queries) GetStory(ctx context.Context, storyID int32) (Story, error) {
	row := q.db.QueryRow(ctx, getStory, storyID)
	var i Story
	err := row.Scan(
		&i.StoryID,
		&i.WeekNumber,
		&i.DayLetter,
		&i.VideoUrl,
		&i.LastRevision,
		&i.AuthorID,
		&i.AuthorName,
		&i.CourseID,
	)
	return i, err
}

const getStoryWithDescription = `-- name: GetStoryWithDescription :one
SELECT s.story_id, s.week_number, s.day_letter, s.video_url, s.last_revision, s.author_id, s.author_name, s.course_id,
       sd.language_code, sd.description_text
FROM stories s
LEFT JOIN story_descriptions sd ON s.story_id = sd.story_id
WHERE s.story_id = $1
`

type GetStoryWithDescriptionRow struct {
	StoryID         int32            `json:"story_id"`
	WeekNumber      int32            `json:"week_number"`
	DayLetter       string           `json:"day_letter"`
	VideoUrl        pgtype.Text      `json:"video_url"`
	LastRevision    pgtype.Timestamp `json:"last_revision"`
	AuthorID        string           `json:"author_id"`
	AuthorName      string           `json:"author_name"`
	CourseID        pgtype.Int4      `json:"course_id"`
	LanguageCode    pgtype.Text      `json:"language_code"`
	DescriptionText pgtype.Text      `json:"description_text"`
}

func (q *Queries) GetStoryWithDescription(ctx context.Context, storyID int32) (GetStoryWithDescriptionRow, error) {
	row := q.db.QueryRow(ctx, getStoryWithDescription, storyID)
	var i GetStoryWithDescriptionRow
	err := row.Scan(
		&i.StoryID,
		&i.WeekNumber,
		&i.DayLetter,
		&i.VideoUrl,
		&i.LastRevision,
		&i.AuthorID,
		&i.AuthorName,
		&i.CourseID,
		&i.LanguageCode,
		&i.DescriptionText,
	)
	return i, err
}

const updateStory = `-- name: UpdateStory :exec
UPDATE stories
SET week_number = $2, day_letter = $3, video_url = $4, author_id = $5, author_name = $6, course_id = $7, last_revision = CURRENT_TIMESTAMP
WHERE story_id = $1
`

type UpdateStoryParams struct {
	StoryID    int32       `json:"story_id"`
	WeekNumber int32       `json:"week_number"`
	DayLetter  string      `json:"day_letter"`
	VideoUrl   pgtype.Text `json:"video_url"`
	AuthorID   string      `json:"author_id"`
	AuthorName string      `json:"author_name"`
	CourseID   pgtype.Int4 `json:"course_id"`
}

func (q *Queries) UpdateStory(ctx context.Context, arg UpdateStoryParams) error {
	_, err := q.db.Exec(ctx, updateStory,
		arg.StoryID,
		arg.WeekNumber,
		arg.DayLetter,
		arg.VideoUrl,
		arg.AuthorID,
		arg.AuthorName,
		arg.CourseID,
	)
	return err
}
