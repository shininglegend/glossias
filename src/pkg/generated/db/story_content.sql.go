// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: story_content.sql

package db

import (
	"context"
)

const deleteAllStoryLines = `-- name: DeleteAllStoryLines :exec
DELETE FROM story_lines WHERE story_id = $1
`

func (q *Queries) DeleteAllStoryLines(ctx context.Context, storyID int32) error {
	_, err := q.db.Exec(ctx, deleteAllStoryLines, storyID)
	return err
}

const deleteStoryDescriptions = `-- name: DeleteStoryDescriptions :exec
DELETE FROM story_descriptions WHERE story_id = $1
`

func (q *Queries) DeleteStoryDescriptions(ctx context.Context, storyID int32) error {
	_, err := q.db.Exec(ctx, deleteStoryDescriptions, storyID)
	return err
}

const deleteStoryLine = `-- name: DeleteStoryLine :exec
DELETE FROM story_lines WHERE story_id = $1 AND line_number = $2
`

type DeleteStoryLineParams struct {
	StoryID    int32 `json:"story_id"`
	LineNumber int32 `json:"line_number"`
}

func (q *Queries) DeleteStoryLine(ctx context.Context, arg DeleteStoryLineParams) error {
	_, err := q.db.Exec(ctx, deleteStoryLine, arg.StoryID, arg.LineNumber)
	return err
}

const deleteStoryTitles = `-- name: DeleteStoryTitles :exec
DELETE FROM story_titles WHERE story_id = $1
`

func (q *Queries) DeleteStoryTitles(ctx context.Context, storyID int32) error {
	_, err := q.db.Exec(ctx, deleteStoryTitles, storyID)
	return err
}

const getLineText = `-- name: GetLineText :one
SELECT text FROM story_lines
WHERE story_id = $1 AND line_number = $2
`

type GetLineTextParams struct {
	StoryID    int32 `json:"story_id"`
	LineNumber int32 `json:"line_number"`
}

func (q *Queries) GetLineText(ctx context.Context, arg GetLineTextParams) (string, error) {
	row := q.db.QueryRow(ctx, getLineText, arg.StoryID, arg.LineNumber)
	var text string
	err := row.Scan(&text)
	return text, err
}

const getStoryDescription = `-- name: GetStoryDescription :one
SELECT description_text
FROM story_descriptions
WHERE story_id = $1 AND language_code = $2
`

type GetStoryDescriptionParams struct {
	StoryID      int32  `json:"story_id"`
	LanguageCode string `json:"language_code"`
}

// Story descriptions
func (q *Queries) GetStoryDescription(ctx context.Context, arg GetStoryDescriptionParams) (string, error) {
	row := q.db.QueryRow(ctx, getStoryDescription, arg.StoryID, arg.LanguageCode)
	var description_text string
	err := row.Scan(&description_text)
	return description_text, err
}

const getStoryLine = `-- name: GetStoryLine :one
SELECT story_id, line_number, text
FROM story_lines
WHERE story_id = $1 AND line_number = $2
`

type GetStoryLineParams struct {
	StoryID    int32 `json:"story_id"`
	LineNumber int32 `json:"line_number"`
}

func (q *Queries) GetStoryLine(ctx context.Context, arg GetStoryLineParams) (StoryLine, error) {
	row := q.db.QueryRow(ctx, getStoryLine, arg.StoryID, arg.LineNumber)
	var i StoryLine
	err := row.Scan(&i.StoryID, &i.LineNumber, &i.Text)
	return i, err
}

const getStoryLines = `-- name: GetStoryLines :many
SELECT story_id, line_number, text
FROM story_lines
WHERE story_id = $1
ORDER BY line_number
`

// Story lines
func (q *Queries) GetStoryLines(ctx context.Context, storyID int32) ([]StoryLine, error) {
	rows, err := q.db.Query(ctx, getStoryLines, storyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoryLine{}
	for rows.Next() {
		var i StoryLine
		if err := rows.Scan(&i.StoryID, &i.LineNumber, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoryTitle = `-- name: GetStoryTitle :one
SELECT title
FROM story_titles
WHERE story_id = $1 AND language_code = $2
`

type GetStoryTitleParams struct {
	StoryID      int32  `json:"story_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) GetStoryTitle(ctx context.Context, arg GetStoryTitleParams) (string, error) {
	row := q.db.QueryRow(ctx, getStoryTitle, arg.StoryID, arg.LanguageCode)
	var title string
	err := row.Scan(&title)
	return title, err
}

const getStoryTitles = `-- name: GetStoryTitles :many
SELECT story_id, language_code, title
FROM story_titles
WHERE story_id = $1
`

// Story titles
func (q *Queries) GetStoryTitles(ctx context.Context, storyID int32) ([]StoryTitle, error) {
	rows, err := q.db.Query(ctx, getStoryTitles, storyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoryTitle{}
	for rows.Next() {
		var i StoryTitle
		if err := rows.Scan(&i.StoryID, &i.LanguageCode, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertStoryDescription = `-- name: UpsertStoryDescription :exec
INSERT INTO story_descriptions (story_id, language_code, description_text)
VALUES ($1, $2, $3)
ON CONFLICT (story_id, language_code)
DO UPDATE SET description_text = EXCLUDED.description_text
`

type UpsertStoryDescriptionParams struct {
	StoryID         int32  `json:"story_id"`
	LanguageCode    string `json:"language_code"`
	DescriptionText string `json:"description_text"`
}

func (q *Queries) UpsertStoryDescription(ctx context.Context, arg UpsertStoryDescriptionParams) error {
	_, err := q.db.Exec(ctx, upsertStoryDescription, arg.StoryID, arg.LanguageCode, arg.DescriptionText)
	return err
}

const upsertStoryLine = `-- name: UpsertStoryLine :exec
INSERT INTO story_lines (story_id, line_number, text)
VALUES ($1, $2, $3)
`

type UpsertStoryLineParams struct {
	StoryID    int32  `json:"story_id"`
	LineNumber int32  `json:"line_number"`
	Text       string `json:"text"`
}

func (q *Queries) UpsertStoryLine(ctx context.Context, arg UpsertStoryLineParams) error {
	_, err := q.db.Exec(ctx, upsertStoryLine, arg.StoryID, arg.LineNumber, arg.Text)
	return err
}

const upsertStoryTitle = `-- name: UpsertStoryTitle :exec
INSERT INTO story_titles (story_id, language_code, title)
VALUES ($1, $2, $3)
ON CONFLICT (story_id, language_code)
DO UPDATE SET title = EXCLUDED.title
`

type UpsertStoryTitleParams struct {
	StoryID      int32  `json:"story_id"`
	LanguageCode string `json:"language_code"`
	Title        string `json:"title"`
}

func (q *Queries) UpsertStoryTitle(ctx context.Context, arg UpsertStoryTitleParams) error {
	_, err := q.db.Exec(ctx, upsertStoryTitle, arg.StoryID, arg.LanguageCode, arg.Title)
	return err
}
