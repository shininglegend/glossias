// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (user_id, email, name, is_super_admin)
VALUES ($1, $2, $3, $4)
RETURNING user_id, email, name, is_super_admin, created_at, updated_at
`

type CreateUserParams struct {
	UserID       string      `json:"user_id"`
	Email        string      `json:"email"`
	Name         string      `json:"name"`
	IsSuperAdmin pgtype.Bool `json:"is_super_admin"`
}

// User management queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.IsSuperAdmin,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.IsSuperAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, email, name, is_super_admin, created_at, updated_at
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.IsSuperAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, name, is_super_admin, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.IsSuperAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSuperAdmins = `-- name: ListSuperAdmins :many
SELECT user_id, email, name, is_super_admin, created_at, updated_at
FROM users
WHERE is_super_admin = true
ORDER BY created_at DESC
`

func (q *Queries) ListSuperAdmins(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listSuperAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.Name,
			&i.IsSuperAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, email, name, is_super_admin, created_at, updated_at
FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.Name,
			&i.IsSuperAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2, name = $3, is_super_admin = $4, updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
RETURNING user_id, email, name, is_super_admin, created_at, updated_at
`

type UpdateUserParams struct {
	UserID       string      `json:"user_id"`
	Email        string      `json:"email"`
	Name         string      `json:"name"`
	IsSuperAdmin pgtype.Bool `json:"is_super_admin"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.IsSuperAdmin,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.IsSuperAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (user_id, email, name, is_super_admin)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id)
DO UPDATE SET
    email = EXCLUDED.email,
    name = EXCLUDED.name,
    updated_at = CURRENT_TIMESTAMP
RETURNING user_id, email, name, is_super_admin, created_at, updated_at
`

type UpsertUserParams struct {
	UserID       string      `json:"user_id"`
	Email        string      `json:"email"`
	Name         string      `json:"name"`
	IsSuperAdmin pgtype.Bool `json:"is_super_admin"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, upsertUser,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.IsSuperAdmin,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Name,
		&i.IsSuperAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
